/*
 *
 *  MIT License
 *
 *  (C) Copyright 2021-2025 Hewlett Packard Enterprise Development LP
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 *  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 *
 */
@Library('cms-meta-tools') _
@Library('csm-shared-library') __

def pyImage = 'artifactory.algol60.net/csm-docker/stable/csm-docker-sle-python'
def sleImage = 'artifactory.algol60.net/csm-docker/stable/csm-docker-sle'
def pyModBuildPyVersion = '3.13'

def buildRootReldir() {
    return "dist/rpmbuild"
}

def getSleVersion() {
    return sh(returnStdout: true, script: 'awk -F= \'/VERSION_ID/{gsub(/["]/,""); print \$NF}\' /etc/os-release').trim()
}

def getRpmName(packageName, pythonVersion) {
    // Python version should be 'major.minor'
    if (!isValidMajorDotMinor(pythonVersion)) {
        error("Invalid Python version specified: ${pythonVersion}")
    }
    if (pythonVersion == "3.6") {
        return "python3-${packageName}"
    }
    def pythonVersionParts = pythonVersion.tokenize('.')
    def pyMajor = "${pythonVersionParts[0]}"
    def pyMinor = "${pythonVersionParts[1]}"
    return "python${pyMajor}${pyMinor}-${packageName}"
}

def buildRelDir(rpmName, rpmOs, rpmArch) {
    def build_root_reldir = buildRootReldir()
    return "${build_root_reldir}/${rpmArch}/${rpmOs}/${rpmName}"
}

def publishRpms(rpmName, rpmOs, rpmArch, buildReldir) {
    sh "ls -R ${buildReldir}"
    echo "${rpmName} ${rpmOs} ${rpmArch}"
    publishCsmRpms(
        arch: "${rpmArch}",
        component: "${rpmName}",
        isStable: env.IS_STABLE,
        os: "${rpmOs}",
        pattern: "${buildReldir}/RPMS/${rpmArch}/*.rpm",
    )
    publishCsmRpms(
        arch: "src",
        component: "${rpmName}",
        isStable: env.IS_STABLE,
        os: "${rpmOs}",
        pattern: "${buildReldir}/SRPMS/*.rpm",
    )
}

def initPrep() {
    // This function is defined in cms-meta-tools:vars/cloneCMSMetaTools.groovy
    cloneCMSMetaTools()

    // This function is defined in cms-meta-tools:vars/setVersionFiles.groovy
    setVersionFiles()

    withCredentials([usernamePassword(credentialsId: 'artifactory-algol60-readonly', passwordVariable: 'ARTIFACTORY_PASSWORD', usernameVariable: 'ARTIFACTORY_USERNAME')]) {
        sh "make runbuildprep"
    }

    sh "make lint"

    runLibraryScript("addRpmMetaData.sh", "${env.WORKSPACE}/${env.META_RPM_SPEC_FILE}")
    runLibraryScript("addRpmMetaData.sh", "${env.WORKSPACE}/${env.SPEC_FILE}")

    // This generates the netrc file that we need
    getDockerBuildArgs()
}

def dockerPullAndTag(dockerArch, sourceDockerImage, dockerBuildImage) {
    lock('docker-image-pull') {
        sh "docker pull --platform linux/${dockerArch} ${sourceDockerImage}"
        sh "docker tag ${sourceDockerImage} ${dockerBuildImage}"
    }
}

pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        disableConcurrentBuilds()
        timeout(time: 90, unit: 'MINUTES')
        timestamps()
    }

    environment {
        NAME = "bos-reporter"
        DESCRIPTION = "Configuration Framework Service Trust Environment"
        IS_STABLE = getBuildIsStable()
        BUILD_ROOT_RELDIR = buildRootReldir()
        META_RPM_OS = "noos"
        META_RPM_NAME = "${env.NAME}"
        META_RPM_ARCH = "noarch"
        META_RPM_SPEC_FILE = "${env.NAME}.spec"
        META_BUILD_RELDIR = buildRelDir(env.META_RPM_NAME, env.META_RPM_OS, env.META_RPM_ARCH)
        SPEC_FILE = "python-${env.META_RPM_SPEC_FILE}"
        PIP_INSTALL_ARGS = "--trusted-host arti.hpc.amslabs.hpecorp.net --trusted-host artifactory.algol60.net --index-url https://arti.hpc.amslabs.hpecorp.net:443/artifactory/api/pypi/pypi-remote/simple --extra-index-url http://artifactory.algol60.net/artifactory/csm-python-modules/simple -c constraints.txt --no-cache"
        GENERIC_PY_RPM_SOURCE_TAR = "python-bos-reporter-source.tar"
    }

    stages {
        stage("Init & Prep") {
            steps {
                initPrep()
            }
        }

        stage("Build Python module") {
            agent {
                docker {
                    args '-v /home/jenkins/.ssh:/home/jenkins/.ssh -v /home/jenkins/.netrc:/home/jenkins/.netrc'
                    reuseNode true
                    image "${pyImage}:${pyModBuildPyVersion}"
                }
            }
            environment {
                PY_VERSION = "${pyModBuildPyVersion}"
                PY_PATH = getPythonBinaryPath(pyModBuildPyVersion)
            }
            steps {
                sh "make pymod_build"
            }
        }
        stage('Pylint') {
            matrix {
                axes {
                    axis {
                        name 'PY_VERSION'
                        values '3.6', '3.9', '3.10', '3.11', '3.12', '3.13'
                    }
                }
                agent {
                    docker {
                        args '-v /home/jenkins/.ssh:/home/jenkins/.ssh -v /home/jenkins/.netrc:/home/jenkins/.netrc'
                        reuseNode true
                        image "${pyImage}:${PY_VERSION}"
                    }
                }
                environment {
                    PY_PATH = getPythonBinaryPath(env.PY_VERSION)
                }
                stages {
                    stage("Pylint") {
                        steps {
                            sh "make pymod_pylint"
                        }
                    }
                }
            }
        }

        stage ("Python RPMs Build Prep") {
            steps {
                sh "make python_rpms_prepare"
            }
        }

        stage('Build & Publish Python RPMs') {
            matrix {
                axes {
                    axis {
                        name 'DOCKER_TAG'
                        // $pyImage:$PY_VERSION implies the SLES version used for the build
                        // $pyImage:$PY_VERSION-SLES15.5 dictates the python version and SLES version
                        values '3.6', '3.10', '3.11-SLES15.5', '3.11-SLES15.6','3.11-SLES15.7', '3.12', '3.13'
                    }
                    axis {
                        name 'RPM_ARCH'
                        values 'aarch64', 'x86_64'
                    }
                }
                environment {
                    DOCKER_ARCH = sh(returnStdout: true, script: "[ ${RPM_ARCH} == 'x86_64' ] && echo -n 'amd64' || echo -n 'arm64'")
                    PY_VERSION = sh(script: "echo \${DOCKER_TAG%%-*}", returnStdout: true).trim()
                    DOCKER_BUILD_IMAGE = "${pyImage}:${DOCKER_TAG}-${DOCKER_ARCH}"
                    RPM_NAME = getRpmName(env.NAME, env.PY_VERSION)
                    RPM_VERSION = sh(script: "head -1 .version", returnStdout: true).trim()
                    RPM_RELEASE = sh(script: "head -1 .rpm_release", returnStdout: true).trim()
                }
                stages {
                    stage('Pull & tag') {
                        steps {
                            dockerPullAndTag(env.DOCKER_ARCH, "${pyImage}:${DOCKER_TAG}", env.DOCKER_BUILD_IMAGE)
                        }
                    }
                    stage("Build") {
                        agent {
                            docker {
                                reuseNode true
                                args "-v /home/jenkins/.ssh:/home/jenkins/.ssh -v /home/jenkins/.netrc:/home/jenkins/.netrc --platform linux/${DOCKER_ARCH}"
                                image "${DOCKER_BUILD_IMAGE}"
                            }
                        }
                        environment {
                            SLE_VERSION = getSleVersion()
                            RPM_OS = getSleRpmOs(env.SLE_VERSION)
                            BUILD_RELDIR = buildRelDir(env.RPM_NAME, env.RPM_OS, env.RPM_ARCH)
                        }
                        steps {
                            script {
                                buildCsmRpms(
                                    name: env.RPM_NAME,
                                    version: RPM_VERSION,
                                    sourceTarPath: env.GENERIC_PY_RPM_SOURCE_TAR,
                                    specFileBasename: env.SPEC_FILE,
                                    buildReldir: env.BUILD_RELDIR,
                                    arch: env.RPM_ARCH,
                                )
                            }
                        }
                    }
                    stage ("Publish") {
                        agent {
                            docker {
                                reuseNode true
                                args "-v /home/jenkins/.ssh:/home/jenkins/.ssh -v /home/jenkins/.netrc:/home/jenkins/.netrc --platform linux/${DOCKER_ARCH}"
                                image "${DOCKER_BUILD_IMAGE}"
                            }
                        }
                        environment {
                            SLE_VERSION = getSleVersion()
                            RPM_OS = getSleRpmOs(env.SLE_VERSION)
                            BUILD_RELDIR = buildRelDir(env.RPM_NAME, env.RPM_OS, env.RPM_ARCH)
                        }
                        steps {
                            publishRpms(env.RPM_NAME, env.RPM_OS, env.RPM_ARCH, env.BUILD_RELDIR)
                        }
                    }
                }
            }
        }
        stage('Build meta RPMs') {
            agent {
                docker {
                    args '-v /home/jenkins/.ssh:/home/jenkins/.ssh -v /home/jenkins/.netrc:/home/jenkins/.netrc'
                    reuseNode true
                    image "${sleImage}:latest"
                }
            }
            steps {
                sh "make meta_rpm"
            }
        }
        stage('Publish meta RPMs') {
            steps {
                // Publish meta RPMs
                publishRpms(env.META_RPM_NAME, env.META_RPM_OS, env.META_RPM_ARCH, env.META_BUILD_RELDIR)
            }
        }
    }
}
