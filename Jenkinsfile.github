/*
 *
 *  MIT License
 *
 *  (C) Copyright 2021-2025 Hewlett Packard Enterprise Development LP
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 *  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 *
 */
@Library('cms-meta-tools') _
@Library('csm-shared-library') __

def runBuildPrep() {
    withCredentials([usernamePassword(credentialsId: 'artifactory-algol60-readonly', passwordVariable: 'ARTIFACTORY_PASSWORD', usernameVariable: 'ARTIFACTORY_USERNAME')]) {
        sh "make runbuildprep"
    }
}

def runLint() {
    sh "make lint"
}

def pyImage = 'artifactory.algol60.net/csm-docker/stable/csm-docker-sle-python'
def sleImage = 'artifactory.algol60.net/csm-docker/stable/csm-docker-sle'

def getRpmName(packageName, pythonVersion) {
    if (pythonVersion == "meta") {
        return "${packageName}"
    }
    // If it is not meta, then it should be 'major.minor'
    if (!isValidMajorDotMinor(pythonVersion)) {
        error("Invalid Python version specified: ${pythonVersion}")
    }
    if (pythonVersion == "3.6") {
        return "python3-${packageName}"
    }
    def pythonVersionParts = pythonVersion.tokenize('.')
    def pyMajor = "${pythonVersionParts[0]}"
    def pyMinor = "${pythonVersionParts[1]}"
    return "python${pyMajor}${pyMinor}-${packageName}"
}

def publishRpms(packageName, pyVersion, rpmOs, rpmArch, isStable) {
    def rpm_name = getRpmName(packageName, pyVersion)
    def build_reldir = sh(returnStdout: true, script: 'echo \${BUILD_RELDIR}').trim()
    publishCsmRpms(
        arch: "${rpmArch}",
        isStable: env.IS_STABLE,
        component: "${rpm_name}",
        os: "${rpmOs}",
        pattern: "${build_reldir}/RPMS/${rpmArch}/*.rpm",
    )
    publishCsmRpms(
        arch: "src",
        component: "${rpm_name}",
        isStable: env.IS_STABLE,
        os: "${rpmOs}",
        pattern: "${build_reldir}/SRPMS/*.rpm",
    )
}

pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        disableConcurrentBuilds()
        timeout(time: 90, unit: 'MINUTES')
        timestamps()
    }

    environment {
        NAME = "bos-reporter"
        DESCRIPTION = "Configuration Framework Service Trust Environment"
        IS_STABLE = getBuildIsStable()
        RPM_OS = "noos"
        MAX_PY_VERSION = "3.12"
    }

    stages {
        stage("Init") {
            steps {
                // This function is defined in cms-meta-tools:vars/cloneCMSMetaTools.groovy
                cloneCMSMetaTools()

                // This function is defined in cms-meta-tools:vars/setVersionFiles.groovy
                setVersionFiles()

                runBuildPrep()
            }
        }

        stage ("Prep") {
            environment {
                BUILD_METADATA = getRpmRevision(isStable: env.IS_STABLE)
            }
            steps {
                runLint()

                // The RPM build metadata can be added outside of the matrix, because it is just based on the
                // Git commit being built
                echo "RPM build metadata is ${env.BUILD_METADATA}"
                runLibraryScript("addRpmMetaData.sh", "${env.WORKSPACE}/bos-reporter.spec")
                runLibraryScript("addRpmMetaData.sh", "${env.WORKSPACE}/python-bos-reporter.spec")

                // Just using this as a means to generate the netrc file that we need
                getDockerBuildArgs()

                sh "make rpm_pre_clean"
            }
        }

        stage("Build Python module & Meta RPM") {
            parallel {
                stage("Build Python module") {
                    agent {
                        docker {
                            args '-v /home/jenkins/.ssh:/home/jenkins/.ssh -v /home/jenkins/.netrc:/home/jenkins/.netrc'
                            reuseNode true
                            image "${pyImage}:${MAX_PY_VERSION}"
                        }
                    }
                    environment {
                        PY_BIN = getPythonBinaryPath(env.MAX_PY_VERSION)
                    }
                    steps {
                        sh "make pymod_build"
                    }
                }
                stage("Build meta RPM") {
                    agent {
                        docker {
                            args '-v /home/jenkins/.ssh:/home/jenkins/.ssh -v /home/jenkins/.netrc:/home/jenkins/.netrc'
                            reuseNode true
                            image "${pyImage}:${MAX_PY_VERSION}"
                        }
                    }
                    environment {
                        RPM_NAME = getRpmName(env.NAME, "meta")
                        RPM_ARCH = "noarch"
                        BUILD_METADATA = getRpmRevision(isStable: env.IS_STABLE)
                        SPEC_FILE = "${env.NAME}.spec"
                    }
                    steps {
                        sh "make meta_rpm"
                    }
                }
            }
        }
        stage('Pylint') {
            matrix {
                axes {
                    axis {
                        name 'PY_VERSION'
                        values '3.6', '3.9', '3.10', '3.11', '3.12'
                    }
                }
                agent {
                    docker {
                        args '-v /home/jenkins/.ssh:/home/jenkins/.ssh -v /home/jenkins/.netrc:/home/jenkins/.netrc'
                        reuseNode true
                        image "${pyImage}:${PY_VERSION}"
                    }
                }
                environment {
                    PY_BIN = getPythonBinaryPath(env.PY_VERSION)
                }
                stages {
                    stage("Pylint") {
                        steps {
                            sh "make pymod_pylint_setup"
                            sh "make pymod_pylint_errors"
                            sh "make pymod_pylint_full"
                        }
                    }
                }
            }
        }
        stage('Build & Publish Python 3.6 RPMs') {
            matrix {
                axes {
                    axis {
                        name 'SLE_VERSION'
                        values '15.2', '15.3', '15.4', '15.5', '15.6'
                    }
                    axis {
                        name 'RPM_ARCH'
                        values 'x86_64', 'aarch64'
                    }
                }
                environment {
                    DOCKER_ARCH = sh(returnStdout: true, script: "[ ${RPM_ARCH} == 'x86_64' ] && echo -n 'amd64' || echo -n 'arm64'")
                    PY_VERSION = "3.6"
                    DOCKER_BUILD_IMAGE = "${sleImage}:${SLE_VERSION}-${DOCKER_ARCH}"
                }
                stages {
                    stage('Setup') {
                        steps {
                            lock('docker-image-pull') {
                                sh "docker pull --platform linux/${DOCKER_ARCH} ${sleImage}:${SLE_VERSION}"
                                sh "docker tag ${sleImage}:${SLE_VERSION} ${DOCKER_BUILD_IMAGE}"
                            }
                        }
                    }
                    stage("Build") {
                        agent {
                            docker {
                                reuseNode true
                                //args "-u root -v /home/jenkins/.ssh:/home/jenkins/.ssh -v /home/jenkins/.netrc:/home/jenkins/.netrc --platform linux/${DOCKER_ARCH}"
                                args "-v /home/jenkins/.ssh:/home/jenkins/.ssh -v /home/jenkins/.netrc:/home/jenkins/.netrc --platform linux/${DOCKER_ARCH}"
                                image "${DOCKER_BUILD_IMAGE}"
                            }
                        }
                        environment {
                            RPM_NAME = getRpmName(env.NAME, env.PY_VERSION)
                            BUILD_METADATA = getRpmRevision(isStable: env.IS_STABLE)
                            SPEC_FILE = "python-${env.NAME}.spec"
                        }
                        steps {
                            sh "sudo zypper --non-interactive refresh"
                            sh "sudo zypper --non-interactive in --no-confirm python-rpm-generators 'rpm-build>=4.13' python-rpm-macros systemd-rpm-macros"
                            //sh "useradd -d /home/jenkins jenkins"
                            //sh "sudo -E -n -H -u jenkins make python_rpm"
                            sh "make python_rpm"
                        }
                    }
                    stage('Publish RPMs') {
                        agent {
                            docker {
                                reuseNode true
                                args "-v /home/jenkins/.ssh:/home/jenkins/.ssh -v /home/jenkins/.netrc:/home/jenkins/.netrc --platform linux/${DOCKER_ARCH}"
                                image "${DOCKER_BUILD_IMAGE}"
                            }
                        }
                        steps {
                            script {
                                // Publish Python RPMs
                                def sles_version_parts = "${SLE_VERSION}".tokenize('.')
                                def sles_major = "${sles_version_parts[0]}"
                                def sles_minor = "${sles_version_parts[1]}"
                                publishRpms(env.NAME, "${PY_VERSION}", "sle-${sles_major}sp${sles_minor}", "${RPM_ARCH}", env.IS_STABLE)
                            }
                        }
                    }
                }
            }
        }
        stage('Build & Publish Python 3.9+ RPMs') {
            matrix {
                axes {
                    axis {
                        name 'DOCKER_TAG'
                        // This list should be a superset of the Python versions listed in setup.py (or identical)
                        // Currently Jenkins does not support dynamically reading in the values from the file to use
                        // as matrix values.
                        // $pyImage:$PY_VERSION implies the SLES version used for the build
                        // $pyImage:$PY_VERSION-SLES15.5 dictates the python version and SLES version
                        values '3.9', '3.10', '3.11-SLES15.5', '3.11-SLES15.6', '3.12'
                    }
                    axis {
                        name 'RPM_ARCH'
                        values 'x86_64', 'aarch64'
                    }
                }
                environment {
                    DOCKER_ARCH = sh(returnStdout: true, script: "[ ${RPM_ARCH} == 'x86_64' ] && echo -n 'amd64' || echo -n 'arm64'")
                    PY_VERSION = sh(script: "echo \${DOCKER_TAG%%-*}", returnStdout: true).trim()
                    DOCKER_BUILD_IMAGE = "${pyImage}:${PY_VERSION}-${DOCKER_ARCH}"
                }
                stages {
                    stage('Setup') {
                        steps {
                            lock('docker-image-pull') {
                                sh "docker pull --platform linux/${DOCKER_ARCH} ${pyImage}:${PY_VERSION}"
                                sh "docker tag ${pyImage}:${PY_VERSION} ${DOCKER_BUILD_IMAGE}"
                            }
                        }
                    }
                    stage("Build") {
                        agent {
                            docker {
                                reuseNode true
                                args "-v /home/jenkins/.ssh:/home/jenkins/.ssh -v /home/jenkins/.netrc:/home/jenkins/.netrc --platform linux/${DOCKER_ARCH}"
                                image "${DOCKER_BUILD_IMAGE}"
                            }
                        }
                        environment {
                            SLE_VERSION = sh(returnStdout: true, script: 'awk -F= \'/VERSION_ID/{gsub(/["]/,""); print \$NF}\' /etc/os-release').trim()
                            RPM_NAME = getRpmName(env.NAME, env.PY_VERSION)
                            BUILD_METADATA = getRpmRevision(isStable: env.IS_STABLE)
                            SPEC_FILE = "python-${env.NAME}.spec"
                        }
                        steps {
                            sh "make python_rpm"
                        }
                    }
                    stage('Publish RPMs') {
                        agent {
                            docker {
                                reuseNode true
                                args "-v /home/jenkins/.ssh:/home/jenkins/.ssh -v /home/jenkins/.netrc:/home/jenkins/.netrc --platform linux/${DOCKER_ARCH}"
                                image "${DOCKER_BUILD_IMAGE}"
                            }
                        }
                        environment {
                            SLE_VERSION = sh(returnStdout: true, script: 'awk -F= \'/VERSION_ID/{gsub(/["]/,""); print \$NF}\' /etc/os-release').trim()
                        }
                        steps {
                            script {
                                // Publish Python RPMs
                                def sles_version_parts = "${SLE_VERSION}".tokenize('.')
                                def sles_major = "${sles_version_parts[0]}"
                                def sles_minor = "${sles_version_parts[1]}"
                                publishRpms(env.NAME, "${PY_VERSION}", "sle-${sles_major}sp${sles_minor}", "${RPM_ARCH}", env.IS_STABLE)
                            }
                        }
                    }
                }
            }
        }

        stage('Publish meta RPMs') {
            steps {
                script {
                    // Publish meta RPMs
                    publishRpms(env.NAME, "meta", "noos", "noarch", env.IS_STABLE)
                }
            }
        }
    }
}
